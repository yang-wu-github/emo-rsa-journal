var Ma5_UttInfEmoTruInf = function(utterance, emotion, params){

	var listener0 = cache(function(utt_emo, params) {

		var uttMeaning = function(utterance, state){
			return flip(params.literalMeanings[utterance][state]);
		};

	  Infer({model: function(){
	    var state = uniformDraw(states);
	    var u = uttMeaning(utt_emo, state);
	    condition(u);
	    return state;
	  }})
	}, 10000);

	var speaker1 = cache(function(state, emoComm, params) {
	  Infer({model: function(){

	    // UTTERANCE UTILITY
	    var utterance = uniformDraw(utterances);
	    var L0Utt = listener0(utterance, params);
	    var utilitiesUtt = L0Utt.score(state);
	    var speakerUtilityUtt = utilitiesUtt;

	    // EMOTION UTILITY
	    var emotion = uniformDraw(emotions);
	    var L0Emo = listener0(emotion, params);
	    var infUtilityEmo = L0Emo.score(state);
	    var emoCommUtility = infUtilityEmo
			var literalSemanticWeight = Math.log(params.literalMeanings[emotion][state])
	    var speakerUtilityEmo = emoComm ? emoCommUtility : literalSemanticWeight

	    var speakerUtility = (speakerUtilityUtt + speakerUtilityEmo)/2;

	    factor(params.speakerOptimality * speakerUtility);

	    return {utterance, emotion};
	  }})
	}, 10000);

	var listener1 = cache(function(utterance, emotion, params) {
	  Infer({model: function(){

	    var state = uniformDraw(states);
	    var emoComm = flip();
	    var S1 = speaker1(state, emoComm, params);

	    observe(S1, {utterance, emotion})

	    return {
	      state: state,
	      emoComm: emoComm
	    }

	  }})
	}, 10000);

	return listener1(utterance, emotion, params)

}
