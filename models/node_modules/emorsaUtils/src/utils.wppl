
var round = function(x){
  return Math.round(x * 100) / 100
}

var utterances = [
  "good", "bad"
];

var emotions = [
  "smile", "frown"
];

var states = [
  1, 2, 3, 4, 5, 6
];

// var weightBins = map(round, _.range(0,1, 0.05))
// var goalScaleParam = 5;
var weightBins = [0.2, 0.4, 0.6, 0.8]
// var weightBins = [1, 2, 3, 4]
var uniformGoalWeights = repeat(weightBins.length, function(){1})
var infGoalWeights = uniformGoalWeights // [1, 1, 1, 1, ...]
var socGoalWeights = uniformGoalWeights

var findWeightIndex = function(val, bins){
  return bins.indexOf(val) + 1
}

var foreach = function(lst, fn) {
  var foreach_ = function(i) {
    if (i < lst.length) {
      fn(lst[i]);
      foreach_(i + 1);
    }
  };
  foreach_(0);
};


var exponentiateRenormalize = function(dist, alpha){
  var probs = normalize(map(function(s){
    var p = Math.exp(dist.score(s))
    return Math.pow(p, alpha)
  }, dist.support()))
  return Categorical({
    vs: dist.support(),
    ps: probs
  })
}

var isChar = function(str, char){
  return str == char
}

var levels = function(df, label) {
  return _.uniq(_.map(df, label));
}

var MakeUniformDraw = function(lst) {
  return Categorical({
    vs: lst,
    ps: repeat(lst.length, function() {
      1
    })
  })
}

var displayDist = function(dist) {
  foreach(dist.support(), function(x) {
    display(x + ", " + Math.exp(dist.score(x)))
  })
}


var distProbs = function(dist, supp) {
  return map(function(s) {
    return Math.exp(dist.score(s))
  }, supp)
}

// should make more mathematically correct using discrete approx to area under curve
var discreteGaussianProbs = cache(function(params, vs){
  var ps = map(function(s){
    Math.exp(Gaussian(params).score(s))+
    Number.EPSILON
  }, vs)
  return ps
})
