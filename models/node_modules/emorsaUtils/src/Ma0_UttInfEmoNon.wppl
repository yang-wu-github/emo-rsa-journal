///fold:
var Ma0_UttInfEmoNon = function(utterance, emotion, params){

  var listener0Utt = cache(function(utterance, params) {

    var uttMeaning = function(utterance, state){
      return flip(params.literalMeanings[utterance][state]);
    };

    Infer({model: function(){
      var state = uniformDraw(states);
      var u = uttMeaning(utterance, state);
      condition(u);
      return state;
    }})
  }, 10000);

  var speaker1 = cache(function(state, params) {
    Infer({model: function(){

      var utterance = uniformDraw(utterances);
      var L0Utt = listener0Utt(utterance, params);

      var utilitiesUtt = L0Utt.score(state);
      var speakerUtility = utilitiesUtt;

      factor(params.speakerOptimality * speakerUtility);

      return {utterance};
    }})
  }, 10000);

  var listener1 = cache(function(utterance, emotion, params) {
    Infer({model: function(){

      var state = uniformDraw(states);
      var S1 = speaker1(state, params);

      observe(S1, {utterance})

      return {
        state: state
      }

    }})
  }, 10000);

  return listener1(utterance, emotion, params)
}
