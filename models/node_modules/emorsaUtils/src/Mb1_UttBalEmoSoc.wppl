var Mb1_UttBalEmoSoc = function(utterance, emotion, params){

	var listener0 = cache(function(utt_emo, params) {

		var uttMeaning = function(utterance, state){
			return flip(params.literalMeanings[utterance][state]);
		};

	  Infer({model: function(){
	    var state = uniformDraw(states);
	    var u = uttMeaning(utt_emo, state);
	    condition(u);
	    return state;
	  }})
	}, 10000);

	var speaker1 = cache(function(state, infGoal, socGoal, params) {
	  Infer({model: function(){

	    var utterance = uniformDraw(utterances);
	    var L0Utt = listener0(utterance, params);

	    var utilitiesUtt = {
	      inf: L0Utt.score(state), // log P(s | u)
	      soc: expectation(L0Utt) // E[s]
	    }
	    var speakerUtilityUtt = infGoal * utilitiesUtt.inf +
	        socGoal * utilitiesUtt.soc;

	    var emotion = uniformDraw(emotions);
			var L0Emo = listener0(emotion, params);

			var utilitiesEmo = expectation(L0Emo);
			var speakerUtilityEmo = socGoal * utilitiesEmo;

	    var speakerUtility = (speakerUtilityUtt + speakerUtilityEmo)/2;

	    factor(params.speakerOptimality * speakerUtility);

	    return {utterance, emotion};
	  }})
	}, 10000);

	var listener1 = cache(function(utterance, emotion, params) {
	  Infer({model: function(){

			var infGoal = categorical({vs: params.weightBins, ps: infGoalWeights})
	    var socGoal = categorical({vs: params.weightBins, ps: socGoalWeights})
	    var state = uniformDraw(states);
	    var S1 = speaker1(state, infGoal, socGoal, params);

	    observe(S1, {utterance, emotion})

	    return {
	      state: state,
				infGoal: findWeightIndex(infGoal, params.weightBins),
				socGoal: findWeightIndex(socGoal, params.weightBins)
	    }

	  }})
	}, 10000);

	return listener1(utterance, emotion, params)

}
