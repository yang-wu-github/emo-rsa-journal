# for (var in unique(h_state_summary$manipulation)) {
#     i <- i + 1
#     plot[i] <- h_state_summary[h_state_summary$manipulation == var,] %>%
#       ggplot(., aes( x = state, y = stat_mean, ymin = stat_ci_lower, ymax = stat_ci_upper))+
#       geom_col(position = position_dodge())+
#       geom_linerange(position = position_dodge())+
#       facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
#     #ggsave(here(paste("/models/figures/mb7_state_inference_", var, ".pdf", sep="")), width = 8, height = 6)
# }
plot_state_emoIsComm <- h_state_summary[h_state_summary$manipulation == "emoIsComm_manipulation",] %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("emoIsComm manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_goal <- h_state_summary[h_state_summary$manipulation == "goal_manipulation",] %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("goal manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_state <- h_state_summary[h_state_summary$manipulation == "state_manipulation",] %>%
mutate(manipulation_level = factor(manipulation_level, levels = c("bad", "no_info", "good"))) %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("state manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_inference <- plot_state_emoIsComm + plot_state_goal + plot_state_state
plot_state_inference
# for (var in unique(h_state_summary$manipulation)) {
#     i <- i + 1
#     plot[i] <- h_state_summary[h_state_summary$manipulation == var,] %>%
#       ggplot(., aes( x = state, y = stat_mean, ymin = stat_ci_lower, ymax = stat_ci_upper))+
#       geom_col(position = position_dodge())+
#       geom_linerange(position = position_dodge())+
#       facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
#     #ggsave(here(paste("/models/figures/mb7_state_inference_", var, ".pdf", sep="")), width = 8, height = 6)
# }
plot_state_emoIsComm <- h_state_summary[h_state_summary$manipulation == "emoIsComm_manipulation",] %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("emoIsComm manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_goal <- h_state_summary[h_state_summary$manipulation == "goal_manipulation",] %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("goal manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_state <- h_state_summary[h_state_summary$manipulation == "state_manipulation",] %>%
mutate(manipulation_level = factor(manipulation_level, levels = c("bad", "no_info", "good"))) %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("state manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_inference <- plot_state_emoIsComm + plot_state_goal + plot_state_state
plot_state_inference
# for (var in unique(h_state_summary$manipulation)) {
#     i <- i + 1
#     plot[i] <- h_state_summary[h_state_summary$manipulation == var,] %>%
#       ggplot(., aes( x = state, y = stat_mean, ymin = stat_ci_lower, ymax = stat_ci_upper))+
#       geom_col(position = position_dodge())+
#       geom_linerange(position = position_dodge())+
#       facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
#     #ggsave(here(paste("/models/figures/mb7_state_inference_", var, ".pdf", sep="")), width = 8, height = 6)
# }
plot_state_emoIsComm <- h_state_summary[h_state_summary$manipulation == "emoIsComm_manipulation",] %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("emoIsComm manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_goal <- h_state_summary[h_state_summary$manipulation == "goal_manipulation",] %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("goal manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_state <- h_state_summary[h_state_summary$manipulation == "state_manipulation",] %>%
mutate(manipulation_level = factor(manipulation_level, levels = c("bad", "no_info", "good"))) %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("state manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_inference <- plot_state_emoIsComm + plot_state_goal + plot_state_state
plot_state_inference
# for (var in unique(h_state_summary$manipulation)) {
#     i <- i + 1
#     plot[i] <- h_state_summary[h_state_summary$manipulation == var,] %>%
#       ggplot(., aes( x = state, y = stat_mean, ymin = stat_ci_lower, ymax = stat_ci_upper))+
#       geom_col(position = position_dodge())+
#       geom_linerange(position = position_dodge())+
#       facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
#     #ggsave(here(paste("/models/figures/mb7_state_inference_", var, ".pdf", sep="")), width = 8, height = 6)
# }
plot_state_emoIsComm <- h_state_summary[h_state_summary$manipulation == "emoIsComm_manipulation",] %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("emoIsComm manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_state <- h_state_summary[h_state_summary$manipulation == "state_manipulation",] %>%
mutate(manipulation_level = factor(manipulation_level, levels = c("bad", "no_info", "good"))) %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("state manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_inference <- plot_state_emoIsComm + plot_state_goal + plot_state_state
plot_state_inference
library(tidyverse)
library(tidyboot)
library(ggplot2)
library(ggthemes)
library(knitr)
library(coda)
library(viridis)
library(here)
library(patchwork)
theme_set(theme_few())
estimate_mode <- function(s) {
d <- density(s)
return(d$x[which.max(d$y)])
}
hpd_upper <- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","upper"])
}
hpd_lower <- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","lower"])
}
count_summary_fn <- function(x) x %>%
summarize(n = n()) %>%
mutate(stat = n / sum(n))
mean_ci_funs <- list("ci_lower" = ci_lower, "mean" = mean, "ci_upper" = ci_upper)
h_state <- read_csv(here("/data/clean_data_true_state.csv"))
h_state_summary <- h_state %>%
rename(emo = exp,
state = response,
manipulation = condition_name,
manipulation_level = condition_level) %>%
mutate(manipulation_level = ifelse(manipulation_level=="inf_goal", "inf", manipulation_level),
manipulation_level = ifelse(manipulation_level=="soc_goal", "soc", manipulation_level))%>%
group_by(manipulation, manipulation_level, utt, emo, state) %>%
tidyboot(summary_function = count_summary_fn,
statistics_functions = function(x) x %>%
summarise(across(stat, mean_ci_funs, .names = "{.fn}")))
results_path <- "models/bda_results/"
model.files <- list.files(
path = paste(here(), results_path, sep = "/"),
pattern = "bda-M"
)
df.m <- map_dfr(model.files, function(model.file){
read_csv(here(paste(results_path, model.file, sep = "")),
col_types = cols(
iter = col_double(),
model = col_character(),
chain = col_double(),
manipulation = col_character(),
manipulation_level = col_character(),
parameter = col_character(),
utt = col_character(),
emo = col_character(),
value = col_character(),
prob = col_double(),
score = col_double()
))
})
df.m %>%
filter(parameter == "parameter", is.na(emo)) %>%
ggplot(., aes(x = prob))+
geom_histogram(position = position_dodge())+
facet_grid(cols = vars(utt), scales = "free_x")
df.m %>%
filter(parameter == "parameter", is.na(emo)) %>%
group_by(utt) %>%
summarize(
MAP = estimate_mode(prob),
cred_upper = hpd_upper(prob),
cred_lower = hpd_lower(prob)
) -> df_parameter_summary
df_parameter_summary %>%
kable(.)
library(tidyverse)
library(tidyboot)
library(ggplot2)
library(ggthemes)
library(knitr)
library(coda)
library(viridis)
library(here)
library(patchwork)
theme_set(theme_few())
estimate_mode <- function(s) {
d <- density(s)
return(d$x[which.max(d$y)])
}
hpd_upper <- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","upper"])
}
hpd_lower <- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","lower"])
}
count_summary_fn <- function(x) x %>%
summarize(n = n()) %>%
mutate(stat = n / sum(n))
mean_ci_funs <- list("ci_lower" = ci_lower, "mean" = mean, "ci_upper" = ci_upper)
results_path <- "models/bda_results/"
model.files <- list.files(
path = paste(here(), results_path, sep = "/"),
pattern = "bda-M"
)
df.m <- map_dfr(model.files, function(model.file){
read_csv(here(paste(results_path, model.file, sep = "")),
col_types = cols(
iter = col_double(),
model = col_character(),
chain = col_double(),
manipulation = col_character(),
manipulation_level = col_character(),
parameter = col_character(),
utt = col_character(),
emo = col_character(),
value = col_character(),
prob = col_double(),
score = col_double()
))
})
df.m %>%
filter(parameter == "parameter", is.na(emo)) %>%
ggplot(., aes(x = prob))+
geom_histogram(position = position_dodge())+
facet_grid(cols = vars(utt), scales = "free_x")
df.m %>%
filter(parameter == "parameter", is.na(emo)) %>%
group_by(utt) %>%
summarize(
MAP = estimate_mode(prob),
cred_upper = hpd_upper(prob),
cred_lower = hpd_lower(prob)
) -> df_parameter_summary
df_parameter_summary %>%
kable(.)
df.m %>%
filter(parameter == "parameter", is.na(emo) == FALSE) %>%
ggplot(., aes(x = prob))+
geom_histogram(position = position_dodge())+
facet_grid(cols = vars(utt, emo), rows = vars(value), scales = "free_x")
df.m %>%
filter(parameter == "parameter", is.na(emo) == FALSE) %>%
group_by(utt, emo, value) %>%
summarize(
MAP = estimate_mode(prob),
cred_upper = hpd_upper(prob),
cred_lower = hpd_lower(prob)
) %>%
rename(prior = 'utt', level = 'emo') -> df_parameter_summary
df_parameter_summary %>%
kable(.)
library(tidyverse)
library(tidyboot)
library(ggplot2)
library(ggthemes)
library(knitr)
library(coda)
library(viridis)
library(here)
library(patchwork)
theme_set(theme_few())
estimate_mode <- function(s) {
d <- density(s)
return(d$x[which.max(d$y)])
}
hpd_upper <- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","upper"])
}
hpd_lower <- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","lower"])
}
count_summary_fn <- function(x) x %>%
summarize(n = n()) %>%
mutate(stat = n / sum(n))
mean_ci_funs <- list("ci_lower" = ci_lower, "mean" = mean, "ci_upper" = ci_upper)
results_path <- "models/bda_results/"
model.files <- list.files(
path = paste(here(), results_path, sep = "/"),
pattern = "bda-M"
)
df.m <- map_dfr(model.files, function(model.file){
read_csv(here(paste(results_path, model.file, sep = "")),
col_types = cols(
iter = col_double(),
model = col_character(),
chain = col_double(),
manipulation = col_character(),
manipulation_level = col_character(),
parameter = col_character(),
utt = col_character(),
emo = col_character(),
value = col_character(),
prob = col_double(),
score = col_double()
))
})
df_state <- df.m %>%
filter(parameter == "state") %>%
mutate(state = as.numeric(value)) %>%
select(-value)
df_state_summary <- df_state %>%
group_by(manipulation, manipulation_level, utt, emo, state) %>%
summarize(
MAP = estimate_mode(prob),
cred_upper = hpd_upper(prob),
cred_lower = hpd_lower(prob)
)
head(df_state_summary)
View(df_state_summary)
h_state <- read_csv(here("/data/clean_data_true_state.csv"))
h_state_summary <- h_state %>%
rename(emo = exp,
state = response,
manipulation = condition_name,
manipulation_level = condition_level) %>%
mutate(manipulation_level = ifelse(manipulation_level=="inf_goal", "inf", manipulation_level),
manipulation_level = ifelse(manipulation_level=="soc_goal", "soc", manipulation_level))%>%
group_by(manipulation, manipulation_level, utt, emo, state) %>%
tidyboot(summary_function = count_summary_fn,
statistics_functions = function(x) x %>%
summarise(across(stat, mean_ci_funs, .names = "{.fn}")))
View(h_state_summary)
plot_df_state_emoIsComm <- df_state_summary[df_state_summary$manipulation == "emoIsComm_manipulation",] %>%
ggplot(., aes( x = state, y = MAP, ymin = cred_lower, ymax = cred_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("emoIsComm manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_df_state_emoIsComm
plot_df_state_inference <- plot_df_state_emoIsComm + plot_df_state_goal + plot_df_state_state
plot_df_state_goal <- df_state_summary[df_state_summary$manipulation == "goal_manipulation",] %>%
ggplot(., aes( x = state, y = MAP, ymin = cred_lower, ymax = cred_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("goal manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_df_state_state <- df_state_summary[df_state_summary$manipulation == "state_manipulation",] %>%
mutate(manipulation_level = factor(manipulation_level, levels = c("bad", "no_info", "good"))) %>%
ggplot(., aes( x = state, y = MAP, ymin = cred_lower, ymax = cred_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("state manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_df_state_inference <- plot_df_state_emoIsComm + plot_df_state_goal + plot_df_state_state
plot_state_inference
plot_df_state_inference
df_goal <- df.m %>%
filter(parameter %in% c("socGoal", "infGoal")) %>%
mutate(rating = as.numeric(value)) %>%
select(-value)
df_goal_summary <- df_goal %>%
group_by(manipulation, manipulation_level, parameter, utt, emo, rating) %>%
summarize(
MAP = estimate_mode(prob),
cred_upper = hpd_upper(prob),
cred_lower = hpd_lower(prob)
)
plot_state_emoIsComm <- h_state_summary[h_state_summary$manipulation == "emoIsComm_manipulation",] %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("emoIsComm manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_goal <- h_state_summary[h_state_summary$manipulation == "goal_manipulation",] %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("goal manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_state <- h_state_summary[h_state_summary$manipulation == "state_manipulation",] %>%
mutate(manipulation_level = factor(manipulation_level, levels = c("bad", "no_info", "good"))) %>%
ggplot(., aes( x = state, y = mean, ymin = ci_lower, ymax = ci_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("state manipulation")+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_state_inference <- plot_state_emoIsComm + plot_state_goal + plot_state_state
plot_state_inference
h_goal <- read_csv(here("/data/clean_data_goals.csv"))
h_goal_summary <- h_goal %>%
rename(emo = exp,
manipulation = condition_name,
manipulation_level = condition_level) %>%
mutate(manipulation_level = ifelse(manipulation_level=="inf_goal", "inf", manipulation_level),
manipulation_level = ifelse(manipulation_level=="soc_goal", "soc", manipulation_level))%>%
group_by(manipulation, manipulation_level, utt, emo, question, response) %>%
tidyboot(summary_function = count_summary_fn,
statistics_functions = function(x) x %>%
summarise(across(stat, mean_ci_funs, .names = "{.fn}")))
h_inf_summary <- h_goal_summary[h_goal_summary$question=="informational goal",]
h_soc_summary <- h_goal_summary[h_goal_summary$question=="social goal",]
View(df_goal_summary)
df_inf_summary <- df_goal_summary[df_goal_summary$parameter=="infGoal",]
df_soc_summary <- df_goal_summary[df_goal_summary$parameter=="socGoal",]
plot_df_inf_emoIsComm <- df_inf_summary[df_inf_summary$manipulation == "emoIsComm_manipulation",] %>%
ggplot(., aes( x = rating, y = MAP, ymin = cred_lower, ymax = cred_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("emoIsComm manipulation")+
xlab("inf goal") +
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_df_inf_state <- df_inf_summary[df_inf_summary$manipulation == "state_manipulation",] %>%
mutate(manipulation_level = factor(manipulation_level, levels = c("bad", "no_info", "good"))) %>%
ggplot(., aes( x = rating, y = MAP, ymin = cred_lower, ymax = cred_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("state manipulation")+
xlab("inf goal") +
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_df_inf_inference <- plot_df_inf_emoIsComm + plot_df_inf_state + plot_df_inf_goal
plot_df_inf_goal <- df_inf_summary[df_inf_summary$manipulation == "goal_manipulation",] %>%
ggplot(., aes( x = rating, y = MAP, ymin = cred_lower, ymax = cred_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("goal manipulation")+
xlab("inf goal") +
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_df_inf_inference <- plot_df_inf_emoIsComm + plot_df_inf_state + plot_df_inf_goal
plot_df_soc_state <- df_soc_summary[df_soc_summary$manipulation == "state_manipulation",] %>%
mutate(manipulation_level = factor(manipulation_level, levels = c("bad", "no_info", "good"))) %>%
ggplot(., aes( x = rating, y = MAP, ymin = cred_lower, ymax = cred_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("state manipulation")+
xlab("soc goal") +
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_soc_inference #human
plot_df_soc_inference # model
plot_df_soc_inference <- plot_df_soc_emoIsComm + plot_df_soc_goal + plot_df_soc_state
plot_df_soc_emoIsComm <- df_soc_summary[df_soc_summary$manipulation == "emoIsComm_manipulation",] %>%
ggplot(., aes( x = rating, y = MAP, ymin = cred_lower, ymax = cred_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("emoIsComm manipulation")+
xlab("soc goal") +
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_df_soc_goal <- df_soc_summary[df_soc_summary$manipulation == "goal_manipulation",] %>%
ggplot(., aes( x = rating, y = MAP, ymin = cred_lower, ymax = cred_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("goal manipulation")+
xlab("soc goal") +
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_df_soc_state <- df_soc_summary[df_soc_summary$manipulation == "state_manipulation",] %>%
mutate(manipulation_level = factor(manipulation_level, levels = c("bad", "no_info", "good"))) %>%
ggplot(., aes( x = rating, y = MAP, ymin = cred_lower, ymax = cred_upper))+
geom_col(position = position_dodge())+
geom_linerange(position = position_dodge())+
ggtitle("state manipulation")+
xlab("soc goal") +
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(rows=vars(utt, emo), cols=vars(manipulation_level))
plot_df_soc_inference <- plot_df_soc_emoIsComm + plot_df_soc_goal + plot_df_soc_state
plot_soc_inference #human
plot_df_soc_inference # model
# install.packages("readxl") you'll have to install the package first before loading it using the library() function
library(readxl)
library(here)
library(dplyr)
library(base) # for the gsub function
library(maditr) # for the dcast function # install.packages("maditr")
library(ggplot2)
library(langcog)
library(lme4)
library(forcats)
library(patchwork)
library(wesanderson)
d_raw <- read.csv(here("data_from_json.csv"))
head(d_raw)
library(here)
d_raw <- read.csv(here("data_from_json.csv"))
head(d_raw)
